name: Build

on:
  push:
    branches:
      - "*"
    paths:
      # This action only runs on push when C++ files are changed
      - "**.cpp"
      - "**.h"
      - "**.cmake"
      - "**Lists.txt"

  workflow_dispatch:

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

# Allow one concurrent build
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest - MSVC",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              ext: ".exe",
              buildtype: "Release",
            }
          - {
              name: "Ubuntu Latest - GCC",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              ext: "",
              buildtype: Release,
            }
          - {
              name: "MacOS Latest - Clang",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              ext: "",
              buildtype: "Release",
            }

    steps:
      - uses: actions/checkout@v3

      # on linux and mac use the ninja generator
      - name: Install Ninja generator
        if: runner.os != 'Windows'
        uses: seanmiddleditch/gha-setup-ninja@master

      - uses: actions/cache@v2
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      # Setup caching of build artifacts to reduce total build time (only Linux and MacOS)
      - name: ccache
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.buildtype }}

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}
        if: runner.os != 'Windows'
        run: |
          cmake -B ${{github.workspace}}/build/${{ matrix.config.buildtype }} -G Ninja -DUSE_FLIP:BOOL=TRUE -DUSE_NANOVDB:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.config.buildtype }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Configure CMake (Windows)
        working-directory: ${{github.workspace}}
        if: runner.os == 'Windows'
        run: |
          cmake -B ${{github.workspace}}/build -DUSE_FLIP:BOOL=TRUE -DUSE_NANOVDB:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.config.buildtype }}

      - name: Build
        shell: bash
        working-directory: ${{github.workspace}}
        if: runner.os != 'Windows'
        run: cmake --build ${{github.workspace}}/build/${{ matrix.config.buildtype }} --parallel 4 --config ${{ matrix.config.buildtype }}
        # run: cmake --build ${{github.workspace}}/build --config ${{ matrix.config.buildtype }}

      - name: Build (Windows)
        working-directory: ${{github.workspace}}
        if: runner.os == 'Windows'
        run: cmake --build ${{github.workspace}}/build/ --parallel 4 --config ${{ matrix.config.buildtype }}
        # run: cmake --build ${{github.workspace}}/build --config ${{ matrix.config.buildtype }}

      - name: Testing that code runs
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          pwd
          ./build/${{ matrix.config.buildtype }}/darts_tutorial0${{matrix.ext}}   # change this or add to it as we progress through the assignments
          ./build/${{ matrix.config.buildtype }}/darts_tutorial1${{matrix.ext}}
          ./build/${{ matrix.config.buildtype }}/darts${{matrix.ext}} --help
          ./build/${{ matrix.config.buildtype }}/nanovdb_test${{env.ext}}
        # ./build/${{ matrix.config.buildtype }}/point_gen${{env.ext}}

      # - name: Comparing generated images against reference
      #   working-directory: ${{github.workspace}}
      #   run: |
      #     mkdir build/differences
      #     cd build/differences
      #     cp ${{github.workspace}}/scenes/assignment0/*.png .
      #     cp ${{github.workspace}}/scenes/assignment1/*.png .
      #     ../_deps/flip-build/flip -et -c diff.csv -t gradient.png -r gradient-ref.png
      #     ../_deps/flip-build/flip -et -c diff.csv -t cornell_grayscale.png -r cornell_grayscale-ref.png
      #     ../_deps/flip-build/flip -et -c diff.csv -t 01_xformed_camera_sphere_image.png -r 01_xformed_camera_sphere_image-ref.png
      #     ../_deps/flip-build/flip -et -c diff.csv -t 01_xformed_camera_ray_image.png -r 01_xformed_camera_ray_image-ref.png
      #     ../_deps/flip-build/flip -et -c diff.csv -t 01_manual_ray_image.png -r 01_manual_ray_image-ref.png
      #     ../_deps/flip-build/flip -et -c diff.csv -t 01_recursive_raytracing.png -r 01_recursive_raytracing-ref.png

      - name: Check NanoVDB file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./primitives.nvdb"

      # - name: NanoVDB File exists
      #   if: steps.check_files.outputs.files_exists == 'true'
      #   # Only runs if all of the files exists
      #   run: echo All files exists!

      # - name: Archive test artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: differences-${{ matrix.config.os }}-${{ matrix.config.buildtype }}
      #     path: |
      #       ${{github.workspace}}/build/differences/
